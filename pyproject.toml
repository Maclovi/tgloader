[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.setuptools]
package-dir = { "" = "." }

[project.scripts]
tgloader = "loader.cli:cli"

[project]
name = "loader"
description = "bot loader music"
readme = "README.md"
authors = [
    { name = "Sergey Yavorsky", email = "yavorskyserge@gmail.com" },
]
version = "0.6.2"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]
keywords = [
    "bot",
    "aiogram",
    "youtube",
    "telethon",
    "telegram",
]
dependencies = [
    "pytubefix",
    "aiogram>=3,<4",
    "telethon>=1,<2",
    "cryptg==0.4.0",
    "sqlalchemy==2.0.3",
    "alembic==1.13.2",
    "psycopg[binary]",
    "redis>=5",
]

[project.optional-dependencies]
testing = [
    "pytest==8.3.2",
    "pytest-asyncio==0.23.8",
]

types = [
    "mypy==1.11.1",
    # mypy extensions
    "types-Deprecated",
    "types-PyYAML",
    "types-setuptools",
    "types-ujson",
    "types-redis",
    "types-Pygments",
    "types-docutils",
]

lint = [
    "loader[types]",
    "ruff==0.5.7",
    "bandit==1.7.9",
    "semgrep==1.84.1",
    "codespell==2.3.0",
]

dev = ["loader[types,testing]"]

[project.urls]
Homepage = "https://github.com/Maclovi/tgloader"
Repository = "https://github.com/Maclovi/tgloader"
Documentation = "https://github.com/Maclovi/tgloader"

[tool.pytest.ini_options]
addopts = "--asyncio-mode=auto"
xfail_strict=true
markers = [
    "engine",
    "db_user",
    "db_file",
    "db_userfile",
    "download",
    "videoid",
]
testpaths = [
    "tests",
    "integration",
]
filterwarnings = [
    "ignore::DeprecationWarning:sqlalchemy.*",
    "ignore::DeprecationWarning:.*?stub_http.*?"
]

[tool.hatch.build]
skip-excluded-dirs = true
exclude = ["/tests"]

[tool.mypy]
files = ["loader", "tests"]
python_version = "3.11"
strict = true
pretty = true

no_implicit_optional = true
check_untyped_defs = true
show_error_codes = true
implicit_reexport = true
namespace_packages = true
ignore_missing_imports = true

warn_unused_ignores = false
warn_return_any = true

allow_untyped_calls = true
allow_subclassing_any = true
allow_untyped_decorators = true

disallow_incomplete_defs = true
disallow_any_unimported = false

[tool.isort]
profile = "black"
line_length = 80

[tool.ruff]
line-length = 80
fix = true

[tool.ruff.lint]
select = [
    "I",     # isort
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "ASYNC", # flake8-async           https://docs.astral.sh/ruff/rules/#flake8-async-async
    "C4",    # flake8-comprehensions  https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "B",     # flake8-bugbear         https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "Q",     # flake8-quotes          https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "T20",   # flake8-print           https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "SIM",   # flake8-simplify        https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "PT",    # flake8-pytest-style    https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "PTH",   # flake8-use-pathlib     https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "TCH",   # flake8-type-checking   https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "N",     # pep8-naming            https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "C90",   # mccabe                 https://docs.astral.sh/ruff/rules/#mccabe-c90
    "RUF",   # Ruff-specific rules    https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "PERF",  # Perflint               https://docs.astral.sh/ruff/rules/#perflint-perf
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
