name: Run all tests

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  static_analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install Dependencies and library
        shell: bash
        run: |
          set -ux
          python -m pip install uv
          uv pip install --system .[lint]

      - name: Run ruff
        shell: bash
        run: ruff check

      - name: Run mypy
        shell: bash
        run: mypy

      - name: Run bandit
        shell: bash
        run: bandit -c pyproject.toml -r loader

      - name: Run Semgrep
        shell: bash
        run: semgrep scan --config auto --error
        
  test-basic:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v3
      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}
      - name: show env
        run: echo $SHELL
        shell: bash
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-uv
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo $DEBUG
          python -m pip install uv
          uv pip install --system .[testing]
      - run: mkdir coverage
      - name: Test
        run: pytest
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.pydantic-version }}
      - name: Store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: .coverage.${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.pydantic-version }}
          path: coverage
          if-no-files-found: error
